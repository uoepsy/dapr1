---
title: "Types of relationships"
callout-appearance: simple
---


```{r setup}
#| include: false

source('assets/setup.R')
```


```{r include=FALSE}
library(tidyverse)
library(patchwork)
```


## Functions  

You have seen by now how to visualise the distribution of a variable, and how to visualise a relationship between two variables. Relationships between two variables can look very different, and can follow different patterns. These patterns can be expressed mathematically in the form of __functions.__  

:::{.callout-note}
__Functions__

A function is a mapping between two sets of numbers ($x$ and $y$) - associating every element of $x$ with an element in $y$.  
We often denote functions using the letter $f$, in that we state that $y = f(x)$ ("y equals f of x").     

For example, there is a mapping between these two sets:  

$$x=\begin{bmatrix} 1 \\ 2 \\ 3 \\ 4 \\ 5 \\ 6 \\ 7 \\ 8 \\ \end{bmatrix}, \qquad
y=\begin{bmatrix} 3 \\ 4 \\ 5 \\ 6 \\ 7 \\ 8 \\ 9 \\ 10 \\ \end{bmatrix}$$

And we can write this mapping as:  
$$f(x) = x + 2$$

And we could visualise this relationship between $x$ and $y$:

```{r echo=FALSE}
tibble(
    X = 1:8,
    Y = X+2
) |> 
    ggplot(aes(X,Y)) +
    geom_point() +
    theme_classic()
```

:::

### Linear functions {-}  

In statistics, we often attempt to summarise the pattern that is present in the data using _linear functions_.  

Imagine that we plant 10 trees, and measure their heights each year for 10 years. We could visualise this data (the relationship between _time_ and _tree height_) on a scatterplot (we have added some lines to the plot to show which tree is which):  
<br>
```{r echo=FALSE}
set.seed(677)
tibble(
    tree = rep(1:10,each=11),
    time = rep(0:10,10),
    growth = abs(round(rnorm(110,10,2)))
) |> 
    mutate(growth = ifelse(time==0, round(growth/2), growth)) |>
    group_by(tree) |> 
    mutate(height=cumsum(growth)) |> 
    ungroup() -> treedat 


ggplot(treedat,aes(x=time, y=height))+
    geom_point() + 
    geom_line(aes(group=tree,col=factor(tree)), alpha=.4)+
    xlab("Time (years)") +
    ylab("Tree Height (cm)") +
    ggtitle("Tree height") + 
    theme_classic()+
    theme(legend.position="none")+
    scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))
```

We might sensibly choose to describe this pattern as a line: 
<br>
```{r echo=FALSE}
ggplot(treedat,aes(x=time, y=height))+
    geom_point(alpha=.2) + 
    geom_line(aes(group=tree,col=factor(tree)), alpha=.2)+
    xlab("Time (years)") +
    ylab("Tree Height (cm)") +
    ggtitle("Tree height") + 
    theme_classic()+
    theme(legend.position="none")+
    scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))+
    geom_abline(intercept=5, slope = 10, lwd=1)
```

And in order to describe a line like this, we require two things:  

1. The starting point (i.e., where it crosses the y-axis)
2. The amount it goes up every year. 

When we planted the trees (at year 0), they were on average about 5cm tall. So this is where our line starts.  
For every year, the trees grew by about 10cm on average. So we can now describe tree height _as a function of_ time:  
$$\textrm{Tree height} = 5 + (10 \times \textrm{Years})$$

We can write this in terms of $x$ and $y$:  

1. $y = f(x)$ &nbsp; &nbsp; &nbsp; &nbsp; "$y$ is some function $f$ of $x$"
1. $f(x) = 5 + 10x$ &nbsp; &nbsp; &nbsp; &nbsp; "the function $f$ maps each value $x_i$ to $5 + (10 \times x_i)$"


### Non-linear functions {-}  

Functions don't have to be linear. Often, we might want to describe relationships which appear to be more complex than a straight line.  
For example, it is often suggested that for difficult tasks, _some_ amount of stress may [improve performance](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1906714/) (but not too little or too much). We might think of the relationship between performance and stress as a curve (@fig-ydodson).
<br>
```{r ydodson, echo=FALSE}
#| label: fig-ydodson
#| fig-cap: "Yerkes Dodson Law"
tibble(
    stress = -100:100,
    performance = -(stress^2)
) |> 
    ggplot(aes(x=stress,y=performance))+
    geom_path()+
    scale_x_continuous(breaks=c(-100,100),labels=c("Low","High"))+
    theme_classic()+
    theme(axis.ticks = element_blank(), axis.text.y = element_blank(), axis.line = element_blank())+
    labs(x="Stress",y="Performance")
```
<br>
One way to describe curves is to use polynomials ($x^2$, $x^3$, etc.).   
For example, in the following two sets, $y$ can be described as $f(x)$ where $f(x)=x^2$:  

$$x=\begin{bmatrix} -5 \\ -4 \\ -3 \\ -2 \\ -1 \\ 0 \\ 1 \\ 2 \\ 3 \\ 4 \\ 5 \end{bmatrix}, \qquad
y=\begin{bmatrix} 25 \\ 16 \\ 9 \\ 4 \\ 1 \\ 0 \\ 1 \\ 4 \\ 9 \\ 16 \\ 25 \end{bmatrix}$$

and when we plot each value of $x$ against the corresponding value of $y$: 
```{r echo=FALSE}
tibble(x = -5:5,
       y = x^2
) |> ggplot(aes(x = x, y = y)) + 
    geom_point()
```

:::{.callout-note collapse="true"}
### The code to create the above plot

```{r eval=FALSE}
# the tibble() function can be used to create a dataframe
# here, we create one with two variables, x and y.
# x is the sequence from -5 to 5,
# y is equal to x squared. 
# we save this data as "poly"
poly <- 
    tibble(
        x = c(-5,-4,-3,-2,-1,0,1,2,3,4,5),
        y = x^2
    )
# create a plot with "poly", with variable "x" on the x-axis,
# and variable "y" on the y-axis. Add geom_points for each entry
ggplot(data = poly, aes(x = x, y = y)) + 
    geom_point()
```
:::

## Transformations  

We have seen previously how we might change all the values in a variable, for instance if we want to turn heights from centimetres to metres: 

```{r}
# read in the starwars dataset and assign it the name "starwars2"
starwars2 <- read_csv("https://uoepsy.github.io/data/starwars2.csv")

# take the starwars2 dataframe |>
# mutate it such that there is a new variable called "height_m",
# the values of which are equal to the "height" variable divided by 100.
# then, select only the "height" and "height_m" columns (this is just 
# to make it easier to see without all the other variables)
starwars2 |>
    mutate(
        height_m = height/100
    ) |> 
    select(height, height_m)
```

What we have done here, can be described as a __transformation__, in that we have applied a mathematical __function__ to the values in the _height_ variable. 

:::{.callout-note}
__Transformation__  
  
Data transformation is when we apply a deterministic function to map each value of a variable to a transformed value.   
We transform for various reasons. For instance, we can use it to change the units we are interpreting (e.g., *cm* to *m*), or to change the shape of a distribution (e.g., make it less skewed).  
:::

We could even plot the heights in cm and heights in m against one another (note what units are on each axis): 
```{r echo=FALSE}
starwars2 |>
    mutate(
        height_m = height/100
    ) |> 
    select(height, height_m) |>
    ggplot(aes(x=height, y=height_m))+
    geom_point()
```
<br>
The relationship between a variable and a transformed variable need be linear, for example, log transformation:
<br>
```{r echo=FALSE}
library(latex2exp)
tibble(
  x = c(1:10),
  log_x = log(x)
) |> ggplot(aes(x=x,y=log_x))+geom_point()+
  scale_x_continuous(breaks=1:10)+
  labs(title=TeX("f(x) = log_e(x)"), y = TeX("log_e(x)"))
```


### A recap of Logarithms and Natural Logarithms

:::{.callout-note} 
__Logarithm__

A __logarithm__ (log) is the power to which a number must be raised in order to get some other number.  
Take as examples $10^2$ and $10^3$:  

$$
10^2 = 100 \quad \Longleftrightarrow \quad \log_{10} (100) = 2
$$

$$
10^3 = 1000 \quad \Longleftrightarrow \quad \log_{10} (1000) = 3
$$  

We refer to $\log_{10}$ as "Log base 10". 
:::

:::{.callout-note}
__Natural log__  

A special case of the logarithm is referred to as the __natural logarithm__, and is denoted by $ln$ or $log_e$, where $e = 2.718281828459...$  

$e$ is a special number for which $log_e(e) = 1$.  

In R, this is just the `log()` function, which uses the base $e$ by default.

```{r}
# Natural logarithm of e is 1:
log(2.718281828459, base = 2.718281828459)
log(2.718281828459)
```
:::



## Centering and Standardisation

Recall our dataset from our [introduction to handling numerical data](https://uoepsy.github.io/dapr1/labs/03_numerical.html), in which we had data on 120 participants' IQ scores (measured on the Wechsler Adult Intelligence Scale, WAIS), their ages, and their scores on 2 other tests. We know how to calculate the mean and standard deviation of the IQ scores:  
```{r}
# read in the data
wechsler <- read_csv("https://uoepsy.github.io/data/wechsler.csv")

# calculate the mean and sd of IQs
wechsler |> 
  summarise(
    mean_iq = mean(iq),
    sd_iq = sd(iq)
  )
```

Two very useful transformations we can apply to a variable are __centering__ and __standardisation__.   

1. __Centering__ A transformation which re-expresses each value as the distance from a given number (e.g., the mean).  
1. __Standardising__ A transformation which re-expresses each value as the distance from the mean _in units of standard deviations._

:::{.callout-note}
__Mean-centering__  
  
To __Mean-center__ a variable, we simply subtract the mean from each value, $x_i - \bar{x}$:
$$
\textrm{raw IQ} = \begin{bmatrix} 71 \\ 103 \\ 74 \\ 108 \\ 118 \\ 129 \\ ... \end{bmatrix}, \qquad
\textrm{mean centered IQ} = \begin{bmatrix} 71-99.3 \\ 103-99.3 \\ 74-99.3 \\ 108-99.3 \\ 118-99.3 \\ 129-99.3 \\ ... \end{bmatrix} = \begin{bmatrix} -28.3 \\ 3.7 \\ -25.3 \\ 8.7 \\ 18.7 \\ 29.7 \\ ... \end{bmatrix}
$$
:::

To mean-center in R, we can simply add a new variable using `mutate()` and subtract the mean IQ from the IQ variable:
```{r}
# Take the "wechsler" dataframe, and mutate it,
# such that there is a variable called "iq_meancenter" for which
# the entries are equal to the "iq" variable entries minus the 
# mean of the "iq" variable
wechsler |>
  mutate(
    iq_meancenter = iq - mean(iq)
  )
```

:::{.callout-note}
__Standardisation__  
  
When we __standardise__ a variable, we call the transformed values __z-scores__. To transform a given value $x_i$ into a __z-score__, we simply calculate the distance from $x_i$ to the mean, $\bar{x}$, and divide this by the standard deviation, $s$    

$$
z_i = \frac{x_i - \bar{x}}{s}
$$

So for each of the _raw_ IQ scores, we can transform them to __z-scores__ by subtracting the mean and then dividing by the standard deviation. The resulting values tell us how low/high each participant's IQ score is compared to observed distribution of scores:  
$$
\textrm{raw IQ} = \begin{bmatrix} 71 \\ 103 \\ 74 \\ 108 \\ 118 \\ 129 \\ ... \end{bmatrix}, \qquad
\textrm{standardised IQ} = \begin{bmatrix} \frac{71-99.3}{15.43} \\ \frac{103-99.3}{15.43} \\ \frac{74-99.3}{15.43} \\ \frac{108-99.3}{15.43} \\ \frac{118-99.3}{15.43} \\ \frac{129-99.3}{15.43} \\ ... \end{bmatrix} = \begin{bmatrix} -1.84 \\ 0.238 \\ -1.64 \\ 0.562 \\ 1.21 \\ 1.92 \\ ... \end{bmatrix}
$$
:::

We can achieve this in R either by manually performing the calculation:
```{r}
# Take the "wechsler" dataframe, and mutate it,
# such that there is a variable called "iq_z" for which
# the entries are equal to the "iq" variable entries minus the mean of the "iq"
# variable, divided by the standard deviation of the "iq" variable.  
wechsler |> 
  mutate(
    iq_z = (iq - mean(iq)) / sd(iq)
  )
```

Or we can use the `scale()` function:  
```{r}
# Take the "wechsler" dataframe, and mutate it,
# such that there is a variable called "iq_std" for which
# the entries are equal to the scaled values of the "iq" variable.  
wechsler |>
  mutate(
    iq_std = scale(iq)
  )
```

We can also use the `scale()` function to mean-center a variable, by setting `scale(variable, center = TRUE, scale = FALSE)`:
```{r}
# create two new variables in the "wechsler" dataframe, one which is 
# mean centered iq, and one which is standardised iq:
wechsler |>
  mutate(
    iq_mc = scale(iq, center = TRUE, scale = FALSE),
    iq_std = scale(iq, center = TRUE, scale = TRUE) # these are the default settings
  )
```

### Test norms

Many neuropsychological tests will have _norms_ - parameters which describe the distribution of scores on the test in a normal population. For instance, in a normal adult population, scores on the WAIS have a mean of 100 and a standard deviation of 15. 
<br>
What this means is that rather than calculating a standardised score against the _observed mean of our sample_, we might calculate a standardised score against the test norms. In the formula for $z$, we replace our __sample mean__ $\bar{x}$ with the __population mean__ $\mu$, and the __sample standard deviation__ $s$ with the __population standard deviation__ $\sigma$:  
$$
z = \frac{x - \mu}{\sigma}
$$

The resulting values tell us how low/high each participant's IQ score is compared to the _distribution of IQ scores in the population._  

 
## Glossary

+ __Function:__ A mapping between two sets of numbers, associating every element of the first set with an elemet in the second.  
+ __Transformation:__ Applying a function to a variable to map each value to a transformed value. 
+ __Logarithm:__ The power to which a number must be raised in order to get some other number.
+ __Centering:__ Transformation which re-expresses each value as the distance from a given number (e.g., the mean).  
+ __Standardisation:__ Transformation which re-expresses each value as the distance from the mean _in units of standard deviations._
<br><br>
+ `scale()` To mean center or standardise a variable (depending upon whether `center=TRUE/FALSE` and `scale=TRUE/FALSE`). 
