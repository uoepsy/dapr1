---
title: "Numeric data"
subtitle: "Semester 1 - Week 3"
callout-appearance: simple
---


```{r setup}
#| include: false

source('assets/setup.R')
library(tidyverse)
```


## Formative report A


::: {.callout-important}
Instructions and data were released in [week 1](1_01_design_and_data.html).
:::


### Tasks

For formative report A, you will be asked to perform the following tasks, each related to a week of teaching in this course.  
This week's task is highlighted in bold below. Please only focus on completing that task this week. In the next section, you will also find guided sub-steps you may want to consider to complete this week's task.


> A1) Read the data into R, inspect it, and write a concise introduction to the data and its structure  
> A2) Display and describe the categorical variables  
> **A3) Display and describe six numerical variables of your choice**  
> A4) Display and describe a relationship of interest between two or three variables of your choice  
> A5) Finish the report write-up, knit to PDF, and submit the PDF for formative feedback


### A3 sub-tasks

__This week you will only focus on task A3.__ Below there are some guided sub-steps you may want to consider to complete task A3.

::: {.column-margin}
::: {.callout-tip}
#### Tip

To see the hints, hover your cursor on the superscript numbers.
:::
:::

- Reopen last week's Rmd file, as you will continue last week's work and build on it.^[
Hint: access the Rmd file from the Group Discussion Space. <br>If last week's driver hasn't uploaded it yet, please ask them to share it with the group via the Group Discussion Space, email, or Teams.<br><br>
To download the file from the server, go to the RStudio Files pane, tick the box next to the Rmd file, and select More > Export.
]

::: {.callout-note collapse="true"}
#### Visualising the distribution of numerical data

We display numeric variables with histograms, density plots, or boxplots. Respectively, these use the function `geom_histogram()`, `geom_density()`, or `geom_boxplot()` from ggplot2, which is a package automatically loaded when you load tidyverse via `library(tidverse)`. For illustration purposes, we will use the starwars dataset from `tidyverse`, containing information on Starwars characters.

```{r}
library(tidyverse)
glimpse(starwars)
```

:::{.panel-tabset}
##### Histogram

The distribution of the character heights (cm) can be displayed with a histogram:

```{r}
ggplot(starwars, aes(x = height)) +
    geom_histogram(color = 'gray', fill = 'lightblue') +
    labs(x = "Character height (cm)", y = "Frequency")
```

##### Density plot

The distribution of the character heights (cm) can be displayed with a density plot:

```{r}
ggplot(starwars, aes(x = height)) +
    geom_density(color = 'dodgerblue') +
    labs(x = "Character height (cm)")
```

##### Boxplot

The distribution of the character heights (cm) can be displayed with a box plot:

```{r}
ggplot(starwars, aes(x = height)) +
    geom_boxplot() +
    labs(x = "Character height (cm)")
```

:::

:::

- Create six plots, each displaying the distribution of:[^num-hist]

    + Production budgets
    + Audience scores
    + Rotten Tomatoes ratings
    + World gross income
    + Foreign gross income
    + Year of movie release

[^num-hist]: Hint: you could use `geom_histogram()`, `geom_density()`, or `geom_boxplot()`. 

    __Stop and think__. Do you notice anything strange in the distribution of one of the variables? Among the six variables, one is different from the other 5. Can you think of which one, and why? 
    
    __Answer__. The variable that is slightly different from the other numeric variables is `Year`. While `Year` is stored as a numeric variable, is it perhaps better visualised by `geom_bar()`. You could think of it as an ordinal variable rather than a continuous one.

- Arrange the above plots as a single figure comprising 2 by 3 panels[^num-patchwork]

[^num-patchwork]: Hint: use the `|` and `/` functions from the `patchwork` package. Before you can use these functions, remember to load the package via `library(patchwork)`.

    For example, if you stored four plots into `plt1`, `plt2`, `plt3`, and `plt4`, the code below creates a single figure of 2 by 2 panels:
    
    `(plt1 | plt2) / (plt3 | plt4)`


::: {.callout-note collapse="true"}
#### Compute the mean and standard deviation of a variable

Consider again the starwars dataset. The mean and SD of the height variable can be computed as:

```{r}
starwars |>
    summarise(M = mean(height, na.rm = TRUE),
              SD = sd(height, na.rm = TRUE)) |>
    round(digits = 2)
```

To make a nice table for the PDF document, you can use the `kbl()` function from the `kableExtra` package:

```{r eval = FALSE}
library(kableExtra)

starwars |>
    summarise(M = mean(height, na.rm = TRUE),
              SD = sd(height, na.rm = TRUE)) |>
    kbl(booktabs = TRUE, digits = 2)
```

```{r echo = FALSE}
library(kableExtra)

starwars |>
    summarise(M = mean(height, na.rm = TRUE),
              SD = sd(height, na.rm = TRUE)) |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```
:::

- Create a table of descriptive statistics that summarises the production budgets using the mean and standard deviation.  
In the next step you will learn how to create a table for all variables at once, so this step can be excluded from your report, but it's important to know how to manually compute it too.^[
Hint: the `summarise()` function from tidyverse, `mean()` and `sd()`. <br><br>
Hint: if you remember, there are NAs in the variable. What do you need to add to the `mean()` and `sd()` function to ensure they do not affect the computation?
]

::: {.callout-note collapse="true"}
#### Table of descriptive statistics

Using summarise for more than a couple of variables would make the job very tedious and long. There is a shortcut, which uses the `describe` function from the psych package.  
The following code creates a table of descriptive statistics (via the `describe` function from the psych package) and ensures the table is in proper format by using the `kbl` function from the kableExtra package.

```{r eval=FALSE}
library(kableExtra) # for the kbl function
library(psych)      # for the describe function

starwars |>
    select(height, mass) |>
    describe() |>
    kbl(digits = 2, booktabs = TRUE)   # kbl converts to a nice PDF table
```

```{r echo=FALSE}
library(kableExtra) # for the kbl function
library(psych)      # for the describe function

starwars |>
    select(height, mass) |>
    describe() |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```

To only show the columns `n`, `mean`, `sd`, `median` you can use:

```{r eval=FALSE}
library(kableExtra) # for the kbl function
library(psych)      # for the describe function

starwars |>
    select(height, mass) |>
    describe() |>
    select(n, mean, sd, median) |>
    kbl(digits = 2, booktabs = TRUE)   # kbl converts to a nice PDF table
```

```{r echo=FALSE}
library(kableExtra) # for the kbl function
library(psych)      # for the describe function

starwars |>
    select(height, mass) |>
    describe() |>
    select(n, mean, sd, median) |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```

:::

- Create a table of descriptive statistics that summarises (using the mean and standard deviation) the six numeric variables which you plotted above. [^num-descr-stats]  

[^num-descr-stats]: Hint: the `describe` function from the `psych` package.

    __Stop and think__. Think about the variable `Year` again. Does it make sense to compute the average year? If not, you may wish to exclude it from your table of descriptive statistics.

- Write up a summary of what you have reported in the plots and/or tables, using proper rounding to 2 decimal places and avoiding any reference to R code or functions.

:::{.callout-tip collapse="true"}
### Hiding R code or ouput

:::{.panel-tabset}
#### Hide code but show output

To not show the code of an R code chunk, and only show the output, write:

````
```{{r, echo=FALSE}}
# code goes here
```
````

#### Show code but hide output

To show the code of an R code chunk, but hide the output, write:

````
```{{r, results='hide'}}
# code goes here
```
````

#### Hide both code and output

To hide both code and output of an R code chunk, write:

````
```{{r, include=FALSE}}
# code goes here
```
````
:::
:::

- Make sure that all R code and output is not visible in the PDF report. The PDF report should only include text, tables, and plots.


## Worked example

Consider the dataset available at <https://uoepsy.github.io/data/RestaurantTips.csv>, containing 157 observations on the following 7 variables:

```{r, echo=FALSE}
library(tidyverse)
library(kableExtra)

tribble(
    ~'Variable Name', ~'Description',
    'Bill', 'Size of the bill (in dollars)',
    'Tip', 'Size of the tip (in dollars)',
    'Credit', 'Paid with a credit card? n or y',
    'Guests', 'Number of people in the group',
    'Day', 'Day of the week: m=Monday, t=Tuesday, w=Wednesday, th=Thursday, or f=Friday',
    'Server', 'Code for specific waiter/waitress: A, B, or C',
    'PctTip', 'Tip as a percentage of the bill'
) |>
    kbl() |>
    kable_styling(full_width = FALSE)
```

These data were collected by the owner of a bistro in the US, who was interested in understanding the tipping patterns of their customers. The data are adapted from @lock2020.

```{r}
library(tidyverse)
tips <- read_csv("https://uoepsy.github.io/data/RestaurantTips.csv")
head(tips)
glimpse(tips)
```

```{r}
tips$Day <- factor(tips$Day, 
                   levels = c("m", "t", "w", "th", "f"),
                   labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))

tips$Credit <- factor(tips$Credit, 
                      levels = c("n", "y"),
                      labels = c("No", "Yes"))

tips$Server <- factor(tips$Server)

glimpse(tips)
```

```{r}
tips <- tips |>
    mutate(
        PctTip = ifelse(PctTip > 100, NA, PctTip)
    )
```

We can create a histogram of tips via:

```{r}
ggplot(tips, aes(x = Tip)) + 
    geom_histogram(color = 'white') + 
    labs(x = "Size of the tip (US dollars)")
```

We can create a single figure with the distribution of all numeric variables by using the patchwork package:

::: {.column-margin}
If you save each plot into an object with a name, e.g. `p1`, `p2`, `p3`, `p4`, you can arrange the four plots into 2 by 2 panels as follows:

```
library(patchwork)
(p1 | p2) / (p3 | p4)
```

To do 1 row of 4 plots:

```
p1 | p2 | p3 | p4
```
:::

```{r}
#| column: page
#| fig-height: 6
#| fig-width: 8

library(patchwork)

pltBill <- ggplot(tips, aes(x = Bill)) +
    geom_histogram(color = 'white', fill = 'lightblue') +
    labs(x = "Size of the bill (US dollars)")

pltTip <- ggplot(tips, aes(x = Tip)) +
    geom_histogram(color = 'white', fill = 'lightblue') +
    labs(x = "Size of the tip (US dollars)")

pltGuests <- ggplot(tips, aes(x = Guests)) +
    geom_bar(fill = 'lightblue') +
    labs(x = "Number of people in the group")

pltPctTip <- ggplot(tips, aes(x = PctTip)) +
    geom_histogram(color = 'white', fill = 'lightblue') +
    labs(x = "Tip as a percentage of the bill")

(pltBill | pltTip) / (pltGuests | pltPctTip)
```

To summarise one numeric variable, you can use the `summarise` function from tidyverse, which takes the data and computes a numeric summary. The syntax is:

```
data |>
    summarise(
        write_the_column_name = computation
    )
```

This computes the mean and SD of tip size (in US dollars), and calls the column storing the mean `M`, and the column storing the standard deviation `SD`:

```{r eval=F}
tips |>
    summarise(
        M = mean(Tip, na.rm = TRUE),
        SD = sd(Tip, na.rm = TRUE)
    ) |>
    kbl(digits = 2, booktabs = TRUE)
```

```{r echo=F}
tips |>
    summarise(
        M = mean(Tip, na.rm = TRUE),
        SD = sd(Tip, na.rm = TRUE)
    ) |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```

To summarise all of the numeric variables into a single table of descriptive statistics you can use the `describe` function from the psych package:

```{r eval=F}
library(kableExtra)
library(psych)

tips |>
    select(Bill, Tip, Guests, PctTip) |>
    describe() |>
    kbl(booktabs = TRUE, digits = 2)
```

```{r echo=F}
library(kableExtra)
library(psych)

tips |>
    select(Bill, Tip, Guests, PctTip) |>
    describe() |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```

To only keep the sample size, mean, SD, median, min, max, we use the `select` function from tidyverse:

```{r eval=F}
library(kableExtra)
library(psych)

tips |>
    select(Bill, Tip, Guests, PctTip) |>
    describe() |>
    select(n, mean, sd, median, min, max) |>
    kbl(booktabs = TRUE, digits = 2)
```

```{r echo=F}
library(kableExtra)
library(psych)

tips |>
    select(Bill, Tip, Guests, PctTip) |>
    describe() |>
    select(n, mean, sd, median, min, max) |>
    kbl(digits = 2) |>
    kable_styling(full_width = FALSE)
```


:::{.callout-warning}
#### Use the appropriate summary for each variable type

Ensure that you summarise variables correctly:

- For categorical variables use frequency tables
- For continuous variables use a table of descriptive statistics (mean, SD, Median, etc.)

You should not summarise categorical variables with the mean, SD, and this is why it's important to use `select()` before `describe()` to only keep the variables that are continuous.

:::


:::{.callout-tip}
#### Example writeup

The distributions of bill size, tip size, and group size are skewed to the right. The distribution of tips, as a percentage of the total bill, appears to be approximately bell shaped, with three outliers in the right tail of the distribution.  
The average bill was about \$22.73, with a SD of \$12.16. The average tip was \$3.81, with a SD of \$2.37, corresponding to an average tip as a percentage of the total bill of \$16.59, with a SD of \$4.39. The average party size comprised 2 guests, with a SD of roughly 1 person.
:::


## Student Glossary

To conclude the lab, add the new functions to the glossary of R functions that you started last week. 

| Function   | Use and package |
|:-----------|:--------------|
| `geom_histogram` | ? |
| `geom_density` | ? |
| `geom_boxplot` | ? |
| patchwork: `|` and `/` | ? |
| `summarise` | ? |
| `select` | ? |
| `kbl` | ? |
| `describe` | ? |
